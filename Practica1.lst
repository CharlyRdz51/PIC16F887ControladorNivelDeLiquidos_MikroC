CCS PCH C Compiler, Version 5.076, 56587               23-nov-20 15:35

               Filename:   C:\Users\master\Desktop\SeminarioSensores\Practica1.lst

               ROM used:   938 bytes (3%)
                           Largest free fragment is 31830
               RAM used:   11 (1%) at main() level
                           22 (1%) worst case
               Stack used: 5 locations
               Stack size: 31

*
0000:  GOTO   0290
.................... #define LCD_RS_PIN PIN_D0 
.................... #define LCD_RW_PIN PIN_D1 
.................... #define LCD_ENABLE_PIN PIN_D2 
.................... #define LCD_DATA4 PIN_D3 
.................... #define LCD_DATA5 PIN_D4 
.................... #define LCD_DATA6 PIN_D5 
.................... #define LCD_DATA7 PIN_D6 
.................... #include <18F4550.h> 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
0004:  DATA 54,61
0006:  DATA 6E,71
0008:  DATA 75,65
000A:  DATA 00,00
000C:  DATA 54,61
000E:  DATA 6E,71
0010:  DATA 75,65
0012:  DATA 00,00
0014:  DATA 54,61
0016:  DATA 6E,71
0018:  DATA 75,65
001A:  DATA 20,76
001C:  DATA 61,63
001E:  DATA 69,6F
0020:  DATA 00,00
0022:  DATA 54,61
0024:  DATA 6E,71
0026:  DATA 75,65
0028:  DATA 20,42
002A:  DATA 61,6A
002C:  DATA 6F,00
002E:  DATA 54,61
0030:  DATA 6E,71
0032:  DATA 75,65
0034:  DATA 20,4D
0036:  DATA 65,64
0038:  DATA 69,6F
003A:  DATA 00,00
003C:  DATA 54,61
003E:  DATA 6E,71
0040:  DATA 75,65
0042:  DATA 20,6C
0044:  DATA 6C,65
0046:  DATA 6E,6F
0048:  DATA 00,00
*
0270:  TBLRD*+
0272:  MOVF   FF5,F
0274:  BZ    028E
0276:  MOVFF  FF6,09
027A:  MOVFF  FF7,0A
027E:  MOVFF  FF5,0B
0282:  RCALL  0220
0284:  MOVFF  09,FF6
0288:  MOVFF  0A,FF7
028C:  BRA    0270
028E:  RETURN 0
....................  
.................... #list 
....................  
.................... #fuses NOMCLR INTRC_IO MCLR 
.................... #use delay(clock=2000000) 
*
004A:  CLRF   FEA
004C:  MOVLW  0E
004E:  MOVWF  FE9
0050:  MOVF   FEF,W
0052:  BZ    0062
0054:  MOVLW  A5
0056:  MOVWF  00
0058:  DECFSZ 00,F
005A:  BRA    0058
005C:  NOP   
005E:  DECFSZ FEF,F
0060:  BRA    0054
0062:  RETURN 0
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
00F4:  BSF    F95.3
....................    output_float(LCD_DATA5); 
00F6:  BSF    F95.4
....................    output_float(LCD_DATA6); 
00F8:  BSF    F95.5
....................    output_float(LCD_DATA7); 
00FA:  BSF    F95.6
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
00FC:  BSF    F8C.1
00FE:  BCF    F95.1
....................    delay_cycles(1); 
0100:  NOP   
....................    lcd_output_enable(1); 
0102:  BSF    F8C.2
0104:  BCF    F95.2
....................    delay_cycles(1); 
0106:  NOP   
....................    high = lcd_read_nibble(); 
0108:  RCALL  00A2
010A:  MOVFF  01,13
....................        
....................    lcd_output_enable(0); 
010E:  BCF    F8C.2
0110:  BCF    F95.2
....................    delay_cycles(1); 
0112:  NOP   
....................    lcd_output_enable(1); 
0114:  BSF    F8C.2
0116:  BCF    F95.2
....................    delay_us(1); 
....................    low = lcd_read_nibble(); 
0118:  RCALL  00A2
011A:  MOVFF  01,12
....................        
....................    lcd_output_enable(0); 
011E:  BCF    F8C.2
0120:  BCF    F95.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
0122:  BCF    F95.3
....................    output_drive(LCD_DATA5); 
0124:  BCF    F95.4
....................    output_drive(LCD_DATA6); 
0126:  BCF    F95.5
....................    output_drive(LCD_DATA7); 
0128:  BCF    F95.6
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
012A:  SWAPF  13,W
012C:  MOVWF  00
012E:  MOVLW  F0
0130:  ANDWF  00,F
0132:  MOVF   00,W
0134:  IORWF  12,W
0136:  MOVWF  01
0138:  GOTO   0148 (RETURN)
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
00A2:  CLRF   14
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
00A4:  BSF    F95.3
00A6:  MOVLW  00
00A8:  BTFSC  F83.3
00AA:  MOVLW  01
00AC:  IORWF  14,F
....................    n |= input(LCD_DATA5) << 1; 
00AE:  BSF    F95.4
00B0:  MOVLW  00
00B2:  BTFSC  F83.4
00B4:  MOVLW  01
00B6:  MOVWF  00
00B8:  BCF    FD8.0
00BA:  RLCF   00,F
00BC:  MOVF   00,W
00BE:  IORWF  14,F
....................    n |= input(LCD_DATA6) << 2; 
00C0:  BSF    F95.5
00C2:  MOVLW  00
00C4:  BTFSC  F83.5
00C6:  MOVLW  01
00C8:  MOVWF  00
00CA:  RLCF   00,F
00CC:  RLCF   00,F
00CE:  MOVLW  FC
00D0:  ANDWF  00,F
00D2:  MOVF   00,W
00D4:  IORWF  14,F
....................    n |= input(LCD_DATA7) << 3; 
00D6:  BSF    F95.6
00D8:  MOVLW  00
00DA:  BTFSC  F83.6
00DC:  MOVLW  01
00DE:  MOVWF  00
00E0:  RLCF   00,F
00E2:  RLCF   00,F
00E4:  RLCF   00,F
00E6:  MOVLW  F8
00E8:  ANDWF  00,F
00EA:  MOVF   00,W
00EC:  IORWF  14,F
....................     
....................    return(n); 
00EE:  MOVFF  14,01
....................   #else 
00F2:  RETURN 0
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
0064:  BTFSC  13.0
0066:  BRA    006C
0068:  BCF    F8C.3
006A:  BRA    006E
006C:  BSF    F8C.3
006E:  BCF    F95.3
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
0070:  BTFSC  13.1
0072:  BRA    0078
0074:  BCF    F8C.4
0076:  BRA    007A
0078:  BSF    F8C.4
007A:  BCF    F95.4
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
007C:  BTFSC  13.2
007E:  BRA    0084
0080:  BCF    F8C.5
0082:  BRA    0086
0084:  BSF    F8C.5
0086:  BCF    F95.5
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
0088:  BTFSC  13.3
008A:  BRA    0090
008C:  BCF    F8C.6
008E:  BRA    0092
0090:  BSF    F8C.6
0092:  BCF    F95.6
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
0094:  NOP   
....................    lcd_output_enable(1); 
0096:  BSF    F8C.2
0098:  BCF    F95.2
....................    delay_us(2); 
009A:  NOP   
....................    lcd_output_enable(0); 
009C:  BCF    F8C.2
009E:  BCF    F95.2
00A0:  RETURN 0
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
013C:  BCF    F95.2
....................    lcd_rs_tris(); 
013E:  BCF    F95.0
....................    lcd_rw_tris(); 
0140:  BCF    F95.1
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0142:  BCF    F8C.0
0144:  BCF    F95.0
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
0146:  BRA    00F4
0148:  MOVFF  01,12
014C:  BTFSC  01.7
014E:  BRA    0146
....................    lcd_output_rs(address); 
0150:  MOVF   10,F
0152:  BNZ   0158
0154:  BCF    F8C.0
0156:  BRA    015A
0158:  BSF    F8C.0
015A:  BCF    F95.0
....................    delay_cycles(1); 
015C:  NOP   
....................    lcd_output_rw(0); 
015E:  BCF    F8C.1
0160:  BCF    F95.1
....................    delay_cycles(1); 
0162:  NOP   
....................    lcd_output_enable(0); 
0164:  BCF    F8C.2
0166:  BCF    F95.2
....................    lcd_send_nibble(n >> 4); 
0168:  SWAPF  11,W
016A:  MOVWF  12
016C:  MOVLW  0F
016E:  ANDWF  12,F
0170:  MOVFF  12,13
0174:  RCALL  0064
....................    lcd_send_nibble(n & 0xf); 
0176:  MOVF   11,W
0178:  ANDLW  0F
017A:  MOVWF  12
017C:  MOVWF  13
017E:  RCALL  0064
0180:  RETURN 0
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
0182:  MOVLW  28
0184:  MOVWF  0A
0186:  MOVLW  0C
0188:  MOVWF  0B
018A:  MOVLW  01
018C:  MOVWF  0C
018E:  MOVLW  06
0190:  MOVWF  0D
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0192:  BCF    F8C.2
0194:  BCF    F95.2
....................    lcd_output_rs(0); 
0196:  BCF    F8C.0
0198:  BCF    F95.0
....................    lcd_output_rw(0); 
019A:  BCF    F8C.1
019C:  BCF    F95.1
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
019E:  BCF    F95.3
....................    output_drive(LCD_DATA5); 
01A0:  BCF    F95.4
....................    output_drive(LCD_DATA6); 
01A2:  BCF    F95.5
....................    output_drive(LCD_DATA7); 
01A4:  BCF    F95.6
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
01A6:  BCF    F95.2
....................    lcd_rs_tris(); 
01A8:  BCF    F95.0
....................    lcd_rw_tris(); 
01AA:  BCF    F95.1
....................  #endif 
....................      
....................    delay_ms(15); 
01AC:  MOVLW  0F
01AE:  MOVWF  0E
01B0:  RCALL  004A
....................    for(i=1;i<=3;++i) 
01B2:  MOVLW  01
01B4:  MOVWF  09
01B6:  MOVF   09,W
01B8:  SUBLW  03
01BA:  BNC   01CC
....................    { 
....................        lcd_send_nibble(3); 
01BC:  MOVLW  03
01BE:  MOVWF  13
01C0:  RCALL  0064
....................        delay_ms(5); 
01C2:  MOVLW  05
01C4:  MOVWF  0E
01C6:  RCALL  004A
01C8:  INCF   09,F
01CA:  BRA    01B6
....................    } 
....................     
....................    lcd_send_nibble(2); 
01CC:  MOVLW  02
01CE:  MOVWF  13
01D0:  RCALL  0064
....................    delay_ms(5); 
01D2:  MOVLW  05
01D4:  MOVWF  0E
01D6:  RCALL  004A
....................    for(i=0;i<=3;++i) 
01D8:  CLRF   09
01DA:  MOVF   09,W
01DC:  SUBLW  03
01DE:  BNC   01FA
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
01E0:  CLRF   03
01E2:  MOVF   09,W
01E4:  ADDLW  0A
01E6:  MOVWF  FE9
01E8:  MOVLW  00
01EA:  ADDWFC 03,W
01EC:  MOVWF  FEA
01EE:  MOVFF  FEF,11
01F2:  CLRF   10
01F4:  RCALL  013C
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
01F6:  INCF   09,F
01F8:  BRA    01DA
01FA:  GOTO   02B6 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
01FE:  DECFSZ 0D,W
0200:  BRA    0204
0202:  BRA    020A
....................       address=LCD_LINE_TWO; 
0204:  MOVLW  40
0206:  MOVWF  0E
0208:  BRA    020C
....................    else 
....................       address=0; 
020A:  CLRF   0E
....................       
....................    address+=x-1; 
020C:  MOVLW  01
020E:  SUBWF  0C,W
0210:  ADDWF  0E,F
....................    lcd_send_byte(0,0x80|address); 
0212:  MOVF   0E,W
0214:  IORLW  80
0216:  MOVWF  0F
0218:  CLRF   10
021A:  MOVWF  11
021C:  RCALL  013C
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
021E:  RETURN 0
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
0220:  MOVF   0B,W
0222:  XORLW  07
0224:  BZ    0234
0226:  XORLW  0B
0228:  BZ    023E
022A:  XORLW  06
022C:  BZ    024E
022E:  XORLW  02
0230:  BZ    025A
0232:  BRA    0264
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0234:  MOVLW  01
0236:  MOVWF  0C
0238:  MOVWF  0D
023A:  RCALL  01FE
023C:  BRA    026E
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
023E:  CLRF   10
0240:  MOVLW  01
0242:  MOVWF  11
0244:  RCALL  013C
....................                      delay_ms(2); 
0246:  MOVLW  02
0248:  MOVWF  0E
024A:  RCALL  004A
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
024C:  BRA    026E
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
024E:  MOVLW  01
0250:  MOVWF  0C
0252:  MOVLW  02
0254:  MOVWF  0D
0256:  RCALL  01FE
0258:  BRA    026E
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
025A:  CLRF   10
025C:  MOVLW  10
025E:  MOVWF  11
0260:  RCALL  013C
0262:  BRA    026E
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0264:  MOVLW  01
0266:  MOVWF  10
0268:  MOVFF  0B,11
026C:  RCALL  013C
....................      #endif 
....................    } 
026E:  RETURN 0
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... void main () { 
*
0290:  CLRF   FF8
0292:  BCF    FD0.7
0294:  MOVLW  50
0296:  MOVWF  FD3
0298:  MOVF   FD3,W
029A:  CLRF   05
029C:  CLRF   04
029E:  MOVF   FC1,W
02A0:  ANDLW  C0
02A2:  IORLW  0F
02A4:  MOVWF  FC1
02A6:  MOVLW  07
02A8:  MOVWF  FB4
.................... set_tris_A(0x2F); 
02AA:  MOVLW  2F
02AC:  MOVWF  F92
.................... setup_oscillator(OSC_8MHZ); 
02AE:  MOVLW  70
02B0:  MOVWF  FD3
02B2:  MOVF   FD3,W
.................... lcd_init (); 
02B4:  BRA    0182
.................... lcd_putc('\f'); 
02B6:  MOVLW  0C
02B8:  MOVWF  0B
02BA:  RCALL  0220
.................... lcd_gotoxy (4, 1); 
02BC:  MOVLW  04
02BE:  MOVWF  0C
02C0:  MOVLW  01
02C2:  MOVWF  0D
02C4:  RCALL  01FE
.................... lcd_putc("Tanque"); 
02C6:  MOVLW  04
02C8:  MOVWF  FF6
02CA:  MOVLW  00
02CC:  MOVWF  FF7
02CE:  RCALL  0270
.................... delay_ms (2000); 
02D0:  MOVLW  08
02D2:  MOVWF  09
02D4:  MOVLW  FA
02D6:  MOVWF  0E
02D8:  RCALL  004A
02DA:  DECFSZ 09,F
02DC:  BRA    02D4
.................... lcd_putc('\f'); 
02DE:  MOVLW  0C
02E0:  MOVWF  0B
02E2:  RCALL  0220
.................... lcd_gotoxy (3, 1); 
02E4:  MOVLW  03
02E6:  MOVWF  0C
02E8:  MOVLW  01
02EA:  MOVWF  0D
02EC:  RCALL  01FE
.................... lcd_putc("Tanque"); 
02EE:  MOVLW  0C
02F0:  MOVWF  FF6
02F2:  MOVLW  00
02F4:  MOVWF  FF7
02F6:  RCALL  0270
.................... int bandera, bandera2, bandera3; 
.................... bandera=1; 
02F8:  MOVLW  01
02FA:  MOVWF  06
.................... bandera2=1; 
02FC:  MOVWF  07
.................... bandera3=1; 
02FE:  MOVWF  08
.................... while(TRUE) { 
.................... if (input(PIN_A0) ==0) { 
0300:  BSF    F92.0
0302:  BTFSC  F80.0
0304:  BRA    031A
.................... lcd_gotoxy (3, 2); 
0306:  MOVLW  03
0308:  MOVWF  0C
030A:  MOVLW  02
030C:  MOVWF  0D
030E:  RCALL  01FE
.................... printf (lcd_putc, "Tanque vacio"); 
0310:  MOVLW  14
0312:  MOVWF  FF6
0314:  MOVLW  00
0316:  MOVWF  FF7
0318:  RCALL  0270
.................... } 
.................... if (input(PIN_A0) ==1 && bandera==1) { 
031A:  BSF    F92.0
031C:  BTFSS  F80.0
031E:  BRA    0338
0320:  DECFSZ 06,W
0322:  BRA    0338
.................... lcd_gotoxy (3, 2); 
0324:  MOVLW  03
0326:  MOVWF  0C
0328:  MOVLW  02
032A:  MOVWF  0D
032C:  RCALL  01FE
.................... printf (lcd_putc, "Tanque Bajo"); 
032E:  MOVLW  22
0330:  MOVWF  FF6
0332:  MOVLW  00
0334:  MOVWF  FF7
0336:  RCALL  0270
.................... } 
.................... if(input(PIN_A1) ==1 && bandera2==1) { 
0338:  BSF    F92.1
033A:  BTFSS  F80.1
033C:  BRA    035C
033E:  DECFSZ 07,W
0340:  BRA    035C
.................... bandera=2; 
0342:  MOVLW  02
0344:  MOVWF  06
.................... lcd_gotoxy (3, 2); 
0346:  MOVLW  03
0348:  MOVWF  0C
034A:  MOVLW  02
034C:  MOVWF  0D
034E:  RCALL  01FE
.................... printf (lcd_putc, "Tanque Medio"); 
0350:  MOVLW  2E
0352:  MOVWF  FF6
0354:  MOVLW  00
0356:  MOVWF  FF7
0358:  RCALL  0270
.................... } 
035A:  BRA    0360
.................... else { 
.................... bandera=1; 
035C:  MOVLW  01
035E:  MOVWF  06
.................... } 
.................... if (input(PIN_A2) ==1 && bandera3==1) { 
0360:  BSF    F92.2
0362:  BTFSS  F80.2
0364:  BRA    0386
0366:  DECFSZ 08,W
0368:  BRA    0386
.................... bandera=2; 
036A:  MOVLW  02
036C:  MOVWF  06
.................... bandera2=2; 
036E:  MOVWF  07
.................... lcd_gotoxy (3, 2); 
0370:  MOVLW  03
0372:  MOVWF  0C
0374:  MOVLW  02
0376:  MOVWF  0D
0378:  RCALL  01FE
.................... printf (lcd_putc, "Tanque lleno"); 
037A:  MOVLW  3C
037C:  MOVWF  FF6
037E:  MOVLW  00
0380:  MOVWF  FF7
0382:  RCALL  0270
.................... } 
0384:  BRA    038A
.................... else { 
.................... bandera2=1; 
0386:  MOVLW  01
0388:  MOVWF  07
.................... } 
.................... if (input(PIN_A3) ==1 && input(PIN_A4) ==1) { 
038A:  BSF    F92.3
038C:  BTFSS  F80.3
038E:  BRA    039C
0390:  BSF    F92.4
0392:  BTFSS  F80.4
0394:  BRA    039C
.................... output_high(pin_a5); 
0396:  BCF    F92.5
0398:  BSF    F89.5
.................... } 
039A:  BRA    03A0
.................... else{ 
.................... output_low(pin_a5); 
039C:  BCF    F92.5
039E:  BCF    F89.5
.................... } 
.................... delay_ms (100); 
03A0:  MOVLW  64
03A2:  MOVWF  0E
03A4:  RCALL  004A
03A6:  BRA    0300
.................... } 
.................... } 
03A8:  SLEEP 

Configuration Fuses:
   Word  1: C827   PLL12 CPUDIV1 USBDIV INTRC_IO FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
